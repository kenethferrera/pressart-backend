# üöÄ FREE DEPLOYMENT GUIDE - Digital Art Store Cart System

## üìã Overview
Deploy your full-stack React + Node.js + MongoDB cart system for **$0/month** using:
- **Frontend**: Vercel (Free)
- **Backend**: Railway (Free tier)
- **Database**: MongoDB Atlas (Free 512MB)
- **Keep-Alive**: UptimeRobot (Free cron job)

---

## üóÇÔ∏è STEP 1: SET UP MONGODB ATLAS (FREE DATABASE)

### 1.1 Create Account
1. Go to: https://www.mongodb.com/atlas
2. Click "Try Free"
3. Sign up with Google or create account
4. Choose "Build a database"

### 1.2 Create Free Cluster
1. Select **"M0 FREE"** cluster
2. Cloud Provider: **AWS** (recommended)
3. Region: Choose closest to your location
4. Cluster Name: `pressart-cluster`
5. Click **"Create"**

### 1.3 Configure Database Access
1. Go to **"Database Access"** (left sidebar)
2. Click **"Add New Database User"**
3. Username: `pressart-user`
4. Password: Click **"Autogenerate Secure Password"** (SAVE THIS!)
5. Database User Privileges: **"Read and write to any database"**
6. Click **"Add User"**

### 1.4 Configure Network Access
1. Go to **"Network Access"** (left sidebar)
2. Click **"Add IP Address"**
3. Select **"Allow access from anywhere"** (0.0.0.0/0)
4. Click **"Confirm"**

### 1.5 Get Connection String
1. Go to **"Database"** ‚Üí **"Connect"**
2. Choose **"Connect your application"**
3. Copy the connection string (looks like):
   ```
   mongodb+srv://pressart-user:<password>@pressart-cluster.xxxxx.mongodb.net/?retryWrites=true&w=majority
   ```
4. Replace `<password>` with your actual password
5. **SAVE THIS STRING** - you'll need it for backend deployment

---

## üõ†Ô∏è STEP 2: PREPARE BACKEND FOR DEPLOYMENT

### 2.1 Update Backend Package.json
Navigate to your `pressart-backend` folder and ensure package.json has:
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "engines": {
    "node": "18.x"
  }
}
```

### 2.2 Create Production Environment Template
Create `.env.production` in your backend folder:
```env
PORT=3001
NODE_ENV=production
MONGODB_URI=mongodb+srv://pressart-user:YOUR_PASSWORD@pressart-cluster.xxxxx.mongodb.net/pressart-db?retryWrites=true&w=majority
JWT_SECRET=your_super_secure_random_jwt_secret_for_production_make_it_very_long
JWT_EXPIRES_IN=7d
FRONTEND_URL=https://your-app-name.vercel.app
```

### 2.3 Update Server.js for Production
Ensure your server.js handles production port:
```javascript
const PORT = process.env.PORT || 3001;
```

---

## üöÇ STEP 3: DEPLOY BACKEND TO RAILWAY

### 3.1 Create Railway Account
1. Go to: https://railway.app
2. Sign up with GitHub account
3. Connect your GitHub repositories

### 3.2 Create GitHub Repository
1. Create new repository on GitHub: `pressart-backend`
2. Push your backend code:
   ```bash
   cd pressart-backend
   git init
   git add .
   git commit -m "Initial backend commit"
   git remote add origin https://github.com/yourusername/pressart-backend.git
   git push -u origin main
   ```

### 3.3 Deploy on Railway
1. In Railway dashboard, click **"New Project"**
2. Select **"Deploy from GitHub repo"**
3. Choose your `pressart-backend` repository
4. Railway will automatically detect Node.js and deploy

### 3.4 Configure Environment Variables
1. In Railway project, go to **"Variables"** tab
2. Add these environment variables:
   - `PORT`: `3001`
   - `NODE_ENV`: `production`
   - `MONGODB_URI`: `mongodb+srv://pressart-user:YOUR_PASSWORD@pressart-cluster.xxxxx.mongodb.net/pressart-db?retryWrites=true&w=majority`
   - `JWT_SECRET`: `your_super_secure_random_jwt_secret_for_production`
   - `JWT_EXPIRES_IN`: `7d`
   - `FRONTEND_URL`: `https://your-app-name.vercel.app` (we'll update this later)

### 3.5 Get Backend URL
1. After deployment, Railway provides a URL like:
   ```
   https://your-backend-name.railway.app
   ```
2. **SAVE THIS URL** - you'll need it for frontend

### 3.6 Test Backend
Visit: `https://your-backend-name.railway.app/api/health`
Should return: `{"message": "PressArt Backend Server is running!"}`

---

## ‚öõÔ∏è STEP 4: PREPARE FRONTEND FOR DEPLOYMENT

### 4.1 Update Frontend Environment
In your `digital-art-store` folder, update `.env`:
```env
REACT_APP_GOOGLE_CLIENT_ID=your_google_client_id_here
REACT_APP_API_BASE_URL=https://your-backend-name.railway.app/api
```

### 4.2 Update Build Settings
Ensure package.json has proper build script:
```json
{
  "scripts": {
    "build": "react-scripts build",
    "start": "react-scripts start"
  }
}
```

### 4.3 Test Local Build
```bash
cd digital-art-store
npm run build
```
Should create a `build` folder successfully.

---

## üåê STEP 5: DEPLOY FRONTEND TO VERCEL

### 5.1 Create Vercel Account
1. Go to: https://vercel.com
2. Sign up with GitHub account
3. Import your projects

### 5.2 Create GitHub Repository
1. Create new repository on GitHub: `pressart-frontend`
2. Push your frontend code:
   ```bash
   cd digital-art-store
   git init
   git add .
   git commit -m "Initial frontend commit"
   git remote add origin https://github.com/yourusername/pressart-frontend.git
   git push -u origin main
   ```

### 5.3 Deploy on Vercel
1. In Vercel dashboard, click **"Add New Project"**
2. Import your `pressart-frontend` repository
3. **Build Command**: `npm run build`
4. **Output Directory**: `build`
5. **Install Command**: `npm install`

### 5.4 Configure Environment Variables
1. In project settings, go to **"Environment Variables"**
2. Add:
   - `REACT_APP_GOOGLE_CLIENT_ID`: `your_google_client_id`
   - `REACT_APP_API_BASE_URL`: `https://your-backend-name.railway.app/api`

### 5.5 Deploy
1. Click **"Deploy"**
2. Vercel will build and deploy your app
3. You'll get a URL like: `https://your-app-name.vercel.app`

### 5.6 Update Backend FRONTEND_URL
1. Go back to Railway backend project
2. Update `FRONTEND_URL` variable to: `https://your-app-name.vercel.app`
3. Redeploy backend

---

## üîê STEP 6: UPDATE GOOGLE OAUTH CREDENTIALS

### 6.1 Access Google Cloud Console
1. Go to: https://console.cloud.google.com
2. Select your project
3. Navigate to **"APIs & Services"** ‚Üí **"Credentials"**

### 6.2 Update OAuth 2.0 Client
1. Find your OAuth 2.0 Client ID
2. Click **"Edit"**
3. **Authorized JavaScript origins**, add:
   - `https://your-app-name.vercel.app`
   - `https://your-backend-name.railway.app`
4. **Authorized redirect URIs**, add:
   - `https://your-app-name.vercel.app`
5. Click **"Save"**

---

## ‚è∞ STEP 7: SET UP CRON JOB (KEEP BACKEND AWAKE)

### 7.1 Create UptimeRobot Account
1. Go to: https://uptimerobot.com
2. Sign up for free account
3. Verify email

### 7.2 Add Monitor
1. Click **"Add New Monitor"**
2. **Monitor Type**: HTTP(s)
3. **Friendly Name**: `PressArt Backend`
4. **URL**: `https://your-backend-name.railway.app/api/health`
5. **Monitoring Interval**: 5 minutes
6. Click **"Create Monitor"**

### 7.3 Configure Notifications (Optional)
1. Add your email for downtime alerts
2. Set up status page for public monitoring

---

## üß™ STEP 8: TESTING YOUR LIVE DEPLOYMENT

### 8.1 Test Frontend
1. Visit: `https://your-app-name.vercel.app`
2. Should load your React app
3. Check browser console for errors

### 8.2 Test Backend Connection
1. Open browser dev tools ‚Üí Network tab
2. Try to add item to cart (as guest)
3. Should see API calls to your Railway backend

### 8.3 Test Authentication
1. Click login/sign in with Google
2. Should redirect to Google OAuth
3. After login, should sync cart from guest to user

### 8.4 Test Cross-Device Sync
1. Add items to cart on one browser
2. Login with same Google account on different browser
3. Cart should sync perfectly

### 8.5 Test Database
1. Login to MongoDB Atlas
2. Browse collections: should see Users and Carts
3. Data should appear after user registration/cart actions

---

## üìä MONITORING & MAINTENANCE

### Daily Checks
- UptimeRobot dashboard (backend uptime)
- Vercel dashboard (frontend deployments)
- Railway dashboard (backend usage)

### Monthly Checks
- MongoDB Atlas usage (approaching 512MB limit?)
- Railway credit usage (approaching $5 limit?)
- Google Cloud Console (OAuth usage)

### Scaling Triggers
**Upgrade MongoDB** ($9/month) when:
- Database > 400MB
- 10,000+ registered users

**Upgrade Railway** ($5-20/month) when:
- Consistent high traffic
- Backend sleep becomes issues
- Need guaranteed uptime

---

## üö® TROUBLESHOOTING

### Common Issues

**Frontend not connecting to backend:**
- Check REACT_APP_API_BASE_URL in Vercel environment variables
- Verify CORS settings in backend allow your frontend domain

**Google OAuth not working:**
- Verify authorized origins include both frontend and backend URLs
- Check Google Client ID is correct in frontend environment

**Database connection errors:**
- Verify MongoDB connection string has correct password
- Check Network Access allows 0.0.0.0/0
- Confirm database user has proper permissions

**Backend sleeping despite cron job:**
- Check UptimeRobot is actually pinging
- Verify health endpoint returns 200 status
- Consider shorter ping intervals (3-5 minutes)

---

## üí∞ COST BREAKDOWN

**Current Setup**: $0/month
- Vercel Frontend: Free
- Railway Backend: Free tier ($5 credit)
- MongoDB Atlas: Free (512MB)
- UptimeRobot: Free

**Future Scaling**:
- MongoDB upgrade: $9/month (when needed)
- Railway upgrade: $5-20/month (when traffic grows)
- Total future cost: $15-30/month for significant traffic

---

## üéØ SUCCESS METRICS

Your deployment is successful when:
- ‚úÖ Frontend loads at your Vercel URL
- ‚úÖ Users can register/login with Google
- ‚úÖ Cart items persist across browser sessions
- ‚úÖ Cross-device cart sync works
- ‚úÖ Backend stays awake (no 30-second delays)
- ‚úÖ Database stores users and cart data
- ‚úÖ UptimeRobot shows 99%+ uptime

---

## üöÄ YOU'RE LIVE!

Congratulations! You now have a production-ready e-commerce cart system running entirely on free tier services. Your users can:

1. Browse your digital art store
2. Add items to cart (guest or authenticated)
3. Sign in with Google for cross-device sync
4. Have cart items persist across all devices
5. Enjoy fast, reliable service

Share your live URL and start getting users! üåü

---

**Live URLs:**
- Frontend: https://your-app-name.vercel.app
- Backend API: https://your-backend-name.railway.app/api
- Database: MongoDB Atlas Cloud
- Monitoring: UptimeRobot Dashboard

**Total Monthly Cost: $0** üí∞
